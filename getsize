#!/bin/bash
commandblocks="$1"
prefer="$2"
file="$3"
if [ -z "$1" ]; then
	echo "Usage: count_commandblocks <number of commandblocks> <prefer dimension (x/y)> [file]" 1>&2
	return 1
fi
if [ -z "$prefer" ]; then
	echo "Defaulting to preferred X dimension" 1>&2
	prefer=x
elif [ "$prefer" != "x" ] && [ "$prefer" != "y" ]; then
	echo "Invalid preferred dimension argument" 1>&2
	echo "Usage: count_commandblocks <number of commandblocks> <prefer dimension (x/y)>" 1>&2
	return 1
fi
x= #nothing here
y= #nothing here
echo "Getting the square root of $commandblocks..." 1>&2
sqrt="$(echo "sqrt($commandblocks)" | bc -l)"
echo "sqrt($commandblocks) = $sqrt" 1>&2
sqrt_round="$(echo "sqrt($commandblocks)" | bc)"
echo "sqrt($commandblocks) without floating point = $sqrt_round" 1>&2
echo "Comparing values" 1>&2
if [ "$(echo "$sqrt < $sqrt_round" | bc)" -eq 1 ]; then
	echo "Error: square root is less than square root without floating point. This isn't supposed to happen. Make sure your version of the 'bc' program is not corrupted" 1>&2
	return 1
elif [ "$(echo "$sqrt > $sqrt_round" | bc)" -eq 1 ]; then
	echo "Square root is greater than square root without floating point - rounding to nearest number" 1>&2
	x=$sqrt_round
	y=$sqrt_round
	if [ "$prefer" = "x" ]; then
		echo "Preferring the X dimension" 1>&2
		x="$(echo "$sqrt_round + 1" | bc)"
	elif [ "$prefer" = "y" ]; then
		echo "Preferring the Y dimension" 1>&2
		y="$(echo "$sqrt_round + 1" | bc)"
	else
		echo "Wrong preferred dimension argument, make sure your copy of this script isn't editted/corrupted" 1>&2
		return 1
	fi
else
	echo "Both numbers are equal, no tweaking needed" 1>&2
	x=$sqrt_round
	y=$sqrt_round
fi
outer_x="$(echo "$x + 1" | bc)"
outer_y="$(echo "$y + 1" | bc)"
empty="$(echo "$x * $y - $commandblocks" | bc)"
tput setaf 3
echo "Dimensions of command blocks: $(tput bold)${x}x$y$(tput sgr 0)"
tput setaf 3
echo "Dimension of outer box: $(tput bold)${outer_x}x$outer_y$(tput sgr 0)"
tput setaf 3
echo "Empty spaces: $(tput bold)$empty"
tput sgr 0
if [ -n "$file" ]; then
	echo "Generating output file" 1>&2
	echo "$x" > "$file"
	echo "$y" >> "$file"
	echo "$outer_x" >> "$file"
	echo "$outer_y" >> "$file"
	echo "$empty" >> "$file"
	echo "-- generated by NoCommandClock's count_commandblocks script --" >> $file
fi

